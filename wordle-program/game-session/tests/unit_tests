#[test]
fn test_check_word_with_invalid_length() {
    let sys = setup();
    let game_session = sys.get_program(GAME_SESSION_ID).unwrap();

    // Start the game
    assert!(!game_session.send(USER1, GameSessionAction::StartGame).main_failed());

    // Simulate a word check with invalid length
    let result = game_session.send(USER1, GameSessionAction::CheckWord { word: "short".to_string() });

    // Validate if the program handles invalid input correctly
    assert!(result.main_failed());
}

#[test]
fn test_timeout_with_user_action() {
    let sys = setup();
    let game_session = sys.get_program(GAME_SESSION_ID).unwrap();

    // Start the game
    assert!(!game_session.send(USER1, GameSessionAction::StartGame).main_failed());

    // Simulate a delay but before timeout, user checks the word
    sys.spend_blocks(15);
    assert!(!game_session.send(USER1, GameSessionAction::CheckWord { word: "hello".to_string() }).main_failed());

    // Now simulate a timeout
    sys.spend_blocks(10);

    // Validate if the session status is handled correctly after the timeout
    let state: GameSessionState = game_session.read_state(()).unwrap();
    let session_info = &state
        .game_sessions
        .iter()
        .find(|(user, _)| *user == USER1.into())
        .unwrap()
        .1;

    assert!(matches!(session_info.session_status, SessionStatus::GameOver(_)));
}
